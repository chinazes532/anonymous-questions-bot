from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from aiogram.utils.deep_linking import create_start_link


import keyboards.builder as bkb
import keyboards.inline as ikb

from states.ask_state import AskState
from states.callback_ask import CallbackAskState

from database import (add_user, get_user,
                      insert_message, get_user_id_by_ref_id)

user = Router()

TEXT = """
üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É

üñä –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã"""


@user.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    ref_link = command.args

    link = await create_start_link(bot, user_id, encode=True)

    ref_id = link.split('start=')[-1]

    await add_user(user_id, link, ref_id)

    user = await get_user(user_id)

    if ref_link:
        ref_id_from_link = ref_link.split('start=')[-1]

        referral = await get_user_id_by_ref_id(ref_id_from_link)
        if referral:
            user_referral_id = referral[0]
            await message.answer(text=TEXT,
                                 reply_markup=ikb.user_cancel)
            await state.update_data(ref_link=user_referral_id)
            await state.set_state(AskState.ask)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            await state.clear()
    else:
        await message.answer(f"–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
                             f"üëâ {user[1]}\n\n"
                             f"–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), —á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å üí¨",
                             reply_markup=await bkb.menu(user_id))
        await state.clear()


@user.message(AskState.ask)
async def ask(message: Message, state: FSMContext, bot: Bot):
    if len(message.text) > 4000:
        return await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await state.update_data(ask=message.text)
        data = await state.get_data()

        ref_link = data.get("ref_link")
        ask = data.get("ask")
        user_id = message.from_user.id
        try:
            await bot.send_message(chat_id=ref_link,
                                   text=f'üîî –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n'
                                        f'<blockquote>{ask}</blockquote>\n\n'
                                        f'‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.',
                                   parse_mode='HTML')
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                                 reply_markup=await bkb.ask_menu(ref_link))
            await insert_message(message.message_id, user_id)

            await state.clear()


        except Exception as e:
            if "Telegram server says - Forbidden: bot was blocked by the user" in str(e):
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.\n"
                                     "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")


@user.message(CallbackAskState.callback_ask)
async def ask(message: Message, state: FSMContext, bot: Bot):
    if len(message.text) > 4000:
        return await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    await state.update_data(callback_ask=message.text)
    data = await state.get_data()

    ref_link = data.get("ref_link")
    ask = data.get("callback_ask")  # Assuming this should be 'callback_ask'

    # Check if ref_link is valid
    if ref_link is None:
        return await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")

    try:
        await bot.send_message(chat_id=ref_link,
                               text=f'üîî –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n'
                                    f'<blockquote>{ask}</blockquote>\n\n'
                                    f'‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.',
                               parse_mode='HTML')

        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
                             reply_markup=await bkb.ask_menu(ref_link))

        await state.clear()

    except Exception as e:
        if "Telegram server says - Forbidden: bot was blocked by the user" in str(e):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.\n"
                                 "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")


@user.callback_query(F.data.startswith("write_more_"))
async def write_more(callback: CallbackQuery, state: FSMContext):
    ref_link = callback.data.split("_")[2]
    await state.update_data(ref_link=ref_link)
    await callback.message.answer(text=TEXT,
                                  reply_markup=ikb.user_cancel)
    await state.set_state(CallbackAskState.callback_ask)
